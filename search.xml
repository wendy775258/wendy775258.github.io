<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[apache在Linux配置]]></title>
    <url>%2F2018%2F09%2F28%2Fapache%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在Ubuntu下载安装Apache12345678#安装apachesudo apt-get install apache2#开始或停止apache程序的命令,两种方法:service apache2 start | restart| stopsudo /etc/init.d/apache2 start | restart | stop#查看apache2服务器配置apache2ctl -S apache是模块化的服务器，只有最基础的功能包含在内核服务器中，可以通过加载模块来拓展服务器的功能，基础模块已经提前静态编译加载，通过shell命令 apachectl -l 来查看，其他拓展的模块需要动态编译加载，可以通过 apachectl -M 来查看,apache在动态加载新模块时会重新编译 apache配置文件设置 apache主配置文件一般在/var/apache2/apache2_conf配置文件中通过指令来控制服务 分布式配置文件 .htaccess，提供了针对目录改变配置文件的方法，在某个目录中创建一个.htaccess的纯文本文件，将指令放置在该文件中，则这个目录及其子目录都是这些指令的作用范围 12345#为目录设置．htaccess配置文件必须在主配置文件apache2_conf中设置以下指令，然后#在目录中创建名称为.htaccess的文本文件即可&lt;Directory 放置.htaccess文件的目录名&gt; AllowOverride All&lt;/Directory&gt; 指令不区分大小写，但指令的参数区分大小写 语法: 指令名 参数 指令和参数之间用空格隔开，如果参数中含有空格，需要用＂＂来包裹 指令有多个参数值时，多个值之间用空格隔开 指令 参数１ 参数２ 配置文件中可以通过 ${variable_name} 来引入系统环境变量，也可以通过 Define 指令来自定义参数,还可以通过命令行 $ apachectl -Dvariable_name 来自定义参数 检查配置文件是否有语法错误 $ apachectl -t 或者 $ apachectl configtest apache各指令描述指令有作用范围，(当直接在配置文件中写入指令，没有section包裹时)默认为住服务器全websitesection表示被包裹指令的作用范围，通常有两种模式：１.文件系统模式，2.网址URL模式 文件系统section 12345678910111213141516171819#包裹的指令只作用于目录/var/www/html/example及其子目录中的文件#目录名称可以使用通配符号*(通配所有字符串)?(通配一个字符)［］(通配括号中的一个字符)&lt;Directory /var/www/html/example&gt; 指令...&lt;/Directory&gt;#包裹的指令只作用在相对路径为example.html的文件上，无论这个文件在哪个目录下#目录名称可以使用通配符号*(通配所有字符串)?(通配一个字符)［］(通配括号中的一个字符)&lt;Files example.html&gt; 指令...&lt;/Files&gt;#&lt;Directory&gt;中可以嵌套&lt;Files&gt;,表示包裹指令的作用范围为目录/var/www/example#及其子目录中名称为test.html的所有文件上&lt;Directory /var/www/example&gt; &lt;Files test.html&gt; 指令... &lt;/Files&gt;&lt;/Directory&gt; 虚拟主机和主服务器虚拟主机：一个apache服务器可以同时为多个网址提供web服务, 除了主服务器（Main Server）其他称之为虚拟机(virtual host),可以设置指令作为在某个具体的虚拟机上主服务器：直接配置的服务器，在apache2_conf中没有section包裹的指令都是直接配置在主服务器上虚拟主机会从主服务器上继承所有虚拟机未指明的配置，包括文件根目录，服务器根目录，服务器名称等 当收到request时，服务器会根据ip和port来匹配VirtualHost,如果没有匹配的虚拟机，则直接由主服务器提供服务，如果根据IP和port有多个匹配的virtualHost,则根据ServarName与request头中的Host字段值来匹配选择哪一个虚拟主机虚拟主机的配置可以在主配置文件中，也可以在其他配置文件中，然后引入主配置文件ubuntu上也可以在其他配置文件中配置虚拟主机:1. 打开/etc/apache2/sites-available目录,000-default为配置虚拟主机的模板2. 复制一份default文件并将其名称修改为与网站域名相同(假如为www.wendy.com)，然后修改配置文件中的内容，ServerName指令参数也必须与网站域名一致3. 通过在shell上 sudo a2ensite www.wendy.com 来激活虚拟主机配置．(通过 sudo a2dissite www.wendy.com 来注销虚拟主机配置)4. 重启apache服务即生效 123456789#表示指令只作用在ip为10.1.2.3:80这个虚拟机上,当收到指向该IP和端口号的request时会执行其包裹的指令&lt;VirtualHost 10.1.2.3:80&gt; 指令...&lt;/VirtualHost&gt;#设置服务器的名称#名称设置需要与DNS指向的域名一致,主要用来当一个IP对应多个域名时，通过域名来判断使用那个虚拟机配置#一般在主服务器配置和VirtualHost中ServerName www.example.com 网站url匹配模式section 12345678910111213141516#包裹指令作用范围为全网站(URL)匹配url符合正则表达式的文件#路径名称中可以使用通配符号*(通配所有字符串)?(通配一个字符)［］(通配括号中的一个字符)#若服务器d的url为http://www.example.com:80,则匹配所有url的path中包含/example的所有文件和目录&lt;Location "/example"&gt; 指令...&lt;/Location&gt;#匹配url中以http://www.example.com:80/example开头的文件和目录&lt;Location "^/example"&gt;&lt;/Location&gt;#下面匹配url中的path中包含/example/的目录和子目录文件,不包含file /example&lt;Location "/example/"&gt;&lt;/Location&gt;#url匹配，在原始请求(即非代理的请求)中不需要加入scheme,hostname,post等直接#从/Path/开始匹配，在代理请求中需要匹配使用完整的URL包括scheme,hostname,port等 采用正则表达式来匹配section 123456789101112131415#作用于目录路径中匹配正则表达式的所有目录#匹配所有根目录中以example开头的所有目录&lt;DirectoryMatch "^/example"&gt; 指令...&lt;/DirectoryMatch&gt;#匹配所有根目录中及子目录中以example开头的所有文件&lt;FilesMatch "^/example"&gt; 指令...&lt;/FilesMatch&gt;#全网匹配URL包含该正则表达式的文件和目录&lt;LocationMatch "^/example"&gt; 指令...&lt;/LocationMatch&gt; 指令执行的条件判断 当判断条件才决定是否执行条件包裹的指令，有两种形式，test(条件为true时执行)，!test(条件为false时执行)1234567891011121314151617181920212223242526#在启动服务时，若模块module_name加载了(不管是编译进去的还是通过LoadModule动态加载的都可以)，就执行指令,否则不执行，#如果条件是!module_name，则表示当没有加载module_name时才执行指令&lt;IfModule module_name&gt; 指令...&lt;/IfModule&gt;#在启动服务时，若ｖariable_name参数被定义了则执行，否则不执行#条件为!variable_name，则判断条件相反 &lt;IfDefine&gt;可被嵌套&lt;IfDefine variable_bame&gt; 指令...&lt;/IfDefine&gt;＃表达式判断，支持类似于shell中的比较判断，字符串比较(==|!=|&gt;|&lt;);数值比较(-eq|-ne|-gt|-lt),其他比较(-z(为空)|-n(不为空)|-f(文件存在))#req表示请求报头，env表示环境变量，%&#123;param_name&#125;表示参数#如果request含有host头部，则执行包裹指令&lt;If "-z req("host")"&gt; 指令...&lt;/If&gt;#启动服务器时，如果文件存在(或不存在)才执行包裹的命令#文件名可以是绝对文件路径，也可以是相对与根目录的路径&lt;IfFile /var/www/html/example.html&gt; 指令...&lt;/IfFile&gt; 各项指令描述(有些指令只能在特定的section才能其作用) 关于引入配置文件的指令 12345678#引入其他配置文件到主配置文件中 Include configfile_name#如果Include指向的是一个目录，则目录中所有的文件都会被引入(不建议使用)#可以在文件中使用通配符来一次引入多个文件#如果引入文件不存在或没有匹配的文件进程会中断并报错Include /etc/apache2/example.config#使用IncludeOptional引入文件，当引入文件不存在，系统会忽略该引入命令，不会中断和报错IncludeOptional /etc/apache2/example.config 关于request的指令 123456789101112131415161718192021222324252627282930#限制资源针对某些用户不允许的HTTP请求方法#语法 &lt;Limit method1,method2...&gt;Require ...&lt;/Limit&gt;#方法名称是大小写敏感的，必须都是大写字母#下面例子，表示设置所有有效用户对目录都不具有使用PUT和POST方法的权限&lt;Directory /var/www/html/example&gt; &lt;Limit PUT,POST&gt; Require valid-user &lt;/Limit&gt;&lt;/Directory&gt;#除了列出的方法，对其他方法设置权限要求#除了GET方法，属于editors用户群的用户不具有使用除了GET方法以外的其他方法的权限&lt;LimitExcept GET&gt; Require group editors&lt;/LimitExcept&gt;#限制用户发送request中Body数据的大小#语法 LimitRequestBody number 单位为字节#设置requestBody不能炒作10KLimitRequestBody 10240#限制request头部的数量#限制请求头最多为5个(默认为100)LimitRequestFields 5#限制request头部的大小,单位为bytesLimitRequestFieldSize 8196#限制请求行的大小LimitRequestLineSize 4096 关于response的指令 12345678910111213141516#设置文件的属性标签，即设置response中的ETag头部包含的内容#语法 FileETag 标签1 标签3 标签有5种取值(Size表示文件的大小，MTime最后一次修改的时间，INode文件的i节点号，All以上全部属性都包含，None不设置ETag)#例子设置了文件的大小和更改时间属性FileEtag Size MTime#设置文件或某个目录中所有文件的MIME-Type#语法 ForceType MIME-Type#强行设置example目录中所有没有明确指明类型的文件的MIME-Type为image/gif，如果某个文件没有拓展名称则会被强行转化为.gif格式&lt;Directory /var/www/html/example&gt; ForceType image/gif&lt;/Directory&gt;#将目录中的文件恢复到默认的MIME-Type&lt;Directory /var/www/html/example&gt; ForceType None&lt;/Directory&gt; 关于模块的指令 12#LoadModule module_name module_path 关于TCP连接和HTTP协议的指令 12345678910111213141516171819202122232425262728293031323334#开启长连接(允许客户端通过同一条tcp连接发送多送request)#语法 Keepalive On|Off (默认为On)#http１.0只有服务器知道需要发送的内容的大小是才能有效,如果应答的主体是动态生成的内容，或者大小不确定的，则不能使用keeplive#http1.1,默认都是开启的无论发送内容大小是否确定keepalive On#设置Keepalive的超时时间，当到达时间时，长连接将被关闭#语法 KeepaliveTimeout number 或 KeepaliveTimeout 5ms# 数值后面没有单位表示时间单位为秒，数值后面有ms表示时间单位为毫秒KeepaliveTimeout 5#设置长连接中接受的request数量上限(默认上限为100)MaxKeepaliveRequests 200#允许DNS查询客户端的IP#语法 HostnameLookups On|Off|Double (Double在启用代理的时候能在第一次DNS查询的结果上再查询一次)#默认为OffHostnameLookups On#指定request需要遵守的HTTP的相关格式#语法 HttpProtocalOPtions [Strict|Unsafe][RegisteredMethods|LenientMethods] [Allow0.9|Require1.0]#Strict表示请求头必须严格遵守格式METHOD url HTTP/Version 不能有多余的空格或字符;Unsafe表示请求头格式要求宽松一些，可以在中间有多余空格#RegisteredMethods表示只接受已经注册过的方法，收到没注册过的方法则返回501,可以通过RegisterHttpMethod指令来注册自定义拓展方法;LenientMethods表示也可以接受未注册的方法，收到没注册过的方法不返回501#Allow0.9兼容http1.0之间的版本;Require1.0不接受1.0之前的版本HttpProtocalOptions Strict RegisteredMethods Allow 0.9#注册自定义的HttpMethod#语法 RegisterHttpMethod Method_name#注册一个STOCK和SALL 方法RegisterHttpMethod STOCK SALL 关于自定义参数的指令 12#自定义参数 Define variable_name variable_valueDefine servername "www.example.com" 关于导出运行日志的指令运行日志按照严重性大致分为4类：error,warn,info,debug，在apache中细分为8个等级 123456789101112131415#设置错误日志的输出文件#语法 ErrorLog 文件绝对路径或相对于根目录的相对路径#linux默认的输入日志文件的路径为$&#123;APACHE_LOG_DIR&#125;/error.log有系统环境变量APACHE_LOG_DIR控制#Ubuntu默认的日志输出文件位置/var/log/apache2/error.log#将服务的错误日志输出到/var/www/error.log文件中ErrorLog /var/www/error.log#设置打印日志的格式ErrorLogFormat#设置打印日志的等级#语法 LoginLevel 等级名称 (设置的日子等级及以上等级的日志都将被打印)#打印debug以上的等级日志LoginLevel debug 有些指令可以同时有多个参数，可以参数值前面加上＂＋＂或＂－＂ +param 表示如果在当前资源上该指令已经存在，重写指令时在其指令的参数基础上增加参数param -param 表示如果当前资源上该指令已经存在，在重写指令时在原来指令的参数上减掉参数值param 混合http服务器apache支持多种虚拟主机模型： Name-based Virtual Hosts(一个IP为多个域名网址提供服务) IP-based Virtual Hosts(一台主机配置多个IP,每个IP对应一个域名网址提供服务) 分布式web服务器(多个主机提供一个web服务，多个IP地址分配给同一个域名，公司的DNS服务器需要在每次查询时返回不同的IP地址，也就是DNS轮询，以起到分流负载均衡的作用) apache会有一个主服务器(main server),其他通过指定的服务器称为虚拟主机，当收到一个request时，服务器会先根ip和端口号来查找匹配的VritualHost，如果没有找到，则由主服务器提供配置服务]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>apache</tag>
        <tag>httpd</tag>
        <tag>web server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP协议]]></title>
    <url>%2F2018%2F09%2F26%2FHTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[http协议属于OSI模型的应用层，是web服务使用的协议，用于传输web资源 相关概念web资源 静态文件资源：存放在web服务器文件系统中的资源(text,image,html等) 动态资源：软件程序根据需求动态生成的内容(根据客户端身份,请求，时间生成不同的内容 URI(统一资源标识符)，唯一标识和定位资源，分为两类: URN(统一资源名称):作为特定内容唯一名称使用，通过名称来标识文件，需要框架支持，目前还在实验阶段 URL(统一资源定位符)：定位某台特定服务器上的某一资源的位分为以下类型：绝对URL包含了能找到资源的所有信息，由九个部分组成相对URL两个资源的相对位置，省略了scheme,host和部分位置，需要在基础URL基础上解析找到资源基础URL作为相对URL的参考点使用，可能出现在几个地方 在资源中显示提供，如html文档中可能会包含定义了基础URL的标记，通过它来转换html文档中的所有相对URL 在资源中隐式提供，资源中发现一个相对URL,且没有明确指明基础URL,则该资源的URL为隐式表示的基础URL自动拓展URL用户不用输入完整的URL,浏览器会自动添加拓展成完整的URL 主机名拓展，输入主机名，自动添加www和.com 历史拓展,将用户之前输入过的URL缓存，当用户输入关键字时提供匹配选择补全URL MIME类型MIME用来描述和标记多媒体内容的数据的类型,根据不同类型采取不同的处理数据的方法 MIME type: 主类型/子类型eg: text/html HTTP协议内容http事务http事务由客户端发起的一个http请求和服务端对请求的相应结果组成 http请求(客户端发送http请求报文)请求报文格式 http method(请求方法) GET :服务器向客户端发送命名资源 HEAD:服务器向客户端发送命名资源响应中的头部 POST:将客户端数据发送到服务器端网关的应用程序(如保存到我服务器数据库) PUT: 将客户端数据存储到服务器中路径为request_url中，如路径已存在则覆盖原数据 OPTIONS：询问服务器对request_url资源支持哪些方法，若request_url为通配符，则表示服务器的通用方法 DELETE:请求服务器删除request_url资源，服务器有不通知客户端情况下撤销删除的权利 自定义方法，http允许服务器自行拓展方法，如比较流行的webDEV http拓展方法：LOCK:允许用户锁定资源，以防自己在操作时资源被他人修改；COPY:客户端复制服务器上资源；MOVE:移动服务器上资源等 request_url(命名资源) url没有显示主机名时，默认主机名为正在连接的服务器主机 http_version(http版本) 客户端使用的http版本 request_headers(请求头) key:value entity_body(主体) 只有PUT和POST方法有entity_body部分，其他方法没有 http响应(服务器端响应客户端请求，发送响应报文)响应报文格式 http_version 服务器使用的http版本 status(响应状态码) 一个三位字数的代码，告知客户端请求是否成功，需不需要其他操作 reason_phrase(响应关键字) 用于解释状态码 response_headers(响应头) key:valueEtag请求头，记录为body文件的某些属性(文件大小，更新时间，I-node号)以便浏览器存储 entity_body(响应主体) 可以是任何形式的数据,如image,html,或应用程序等 http连接过程 浏览器从URL中解析出服务器的域名和端口号 浏览器通过DNS服务解析出服务器的IP地址 浏览器与服务器建立一条TCP/IP连接 浏览器向服务器发送HTTP请求报文 服务器向浏览器返回HTTP响应报文 浏览器显示文档 一个web页面包含多个资源对象，浏览器会先执行一个HTTP事务来获取描述页面布局的html框架，然后同时开启多个HTTP事务来获取每个嵌入式的图片java小程序等，这些嵌入式的资源可能位于不同的服务器上 http中间实体Gateways(网关) 连接其他应用程序的特殊web服务器，通常用于将HTTP流量转化为其他协议 代理 位于客户端与服务器之间的实体 缓存 HTTP的仓库，使常用页面的副本可以保存在离客户端更近的地方 隧道 对HTTP报文进行盲转发的特殊代理]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python连接数据库]]></title>
    <url>%2F2018%2F09%2F21%2FPython%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[Python连接关系型数据库连接SQLite SQLite是一种轻量级的保存在普通文件中(无服务器，无配置的事务型)开源数据库，它不依赖于机器和操作系统，方便移植。SQLite是用Python标准库实现的，因此Pythony引擎是内置的 连接SQLite数据库1234import sqlite3conn=sqlite3.connect('test.db') #连接数据库test.db，若不存在则创建，可用绝对路径在其他目录中创建数据库#conn=sqlite3.connect(':memory:') 在内存中创建数据库，用于测试，程序结束数据丢失curs=conn.cursor() #通过cursor对象来处理sql事务 -连接MySQLPython通用连接数据库模块sqlalchemyPython连接非关系型数据库NoSQL连接dbm数据库连接memcached数据库连接redis数据库]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>

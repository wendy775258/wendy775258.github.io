<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTTP协议]]></title>
    <url>%2F2018%2F09%2F26%2FHTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[http协议属于OSI模型的应用层，是web服务使用的协议，用于传输web资源 相关概念web资源 静态文件资源：存放在web服务器文件系统中的资源(text,image,html等) 动态资源：软件程序根据需求动态生成的内容(根据客户端身份,请求，时间生成不同的内容 URI(统一资源标识符)，唯一标识和定位资源，分为两类: URN(统一资源名称):作为特定内容唯一名称使用，通过名称来标识文件，需要框架支持，目前还在实验阶段 URL(统一资源定位符)：定位某台特定服务器上的某一资源的位分为以下类型：绝对URL包含了能找到资源的所有信息，由九个部分组成相对URL两个资源的相对位置，省略了scheme,host和部分位置，需要在基础URL基础上解析找到资源基础URL作为相对URL的参考点使用，可能出现在几个地方 在资源中显示提供，如html文档中可能会包含定义了基础URL的标记，通过它来转换html文档中的所有相对URL 在资源中隐式提供，资源中发现一个相对URL,且没有明确指明基础URL,则该资源的URL为隐式表示的基础URL自动拓展URL用户不用输入完整的URL,浏览器会自动添加拓展成完整的URL 主机名拓展，输入主机名，自动添加www和.com 历史拓展,将用户之前输入过的URL缓存，当用户输入关键字时提供匹配选择补全URL MIME类型MIME用来描述和标记多媒体内容的数据的类型,根据不同类型采取不同的处理数据的方法 MIME type: 主类型/子类型eg: text/html HTTP协议内容http事务http事务由客户端发起的一个http请求和服务端对请求的相应结果组成 http请求(客户端发送http请求报文)请求报文格式 http method(请求方法) GET :服务器向客户端发送命名资源 HEAD:服务器向客户端发送命名资源响应中的头部 POST:将客户端数据发送到服务器端网关的应用程序(如保存到我服务器数据库) PUT: 将客户端数据存储到服务器中路径为request_url中，如路径已存在则覆盖原数据 OPTIONS：询问服务器对request_url资源支持哪些方法，若request_url为通配符，则表示服务器的通用方法 DELETE:请求服务器删除request_url资源，服务器有不通知客户端情况下撤销删除的权利 自定义方法，http允许服务器自行拓展方法，如比较流行的webDEV http拓展方法：LOCK:允许用户锁定资源，以防自己在操作时资源被他人修改；COPY:客户端复制服务器上资源；MOVE:移动服务器上资源等 request_url(命名资源) url没有显示主机名时，默认主机名为正在连接的服务器主机 http_version(http版本) 客户端使用的http版本 request_headers(请求头) key:value entity_body(主体) 只有PUT和POST方法有entity_body部分，其他方法没有 http响应(服务器端响应客户端请求，发送响应报文)响应报文格式 http_version 服务器使用的http版本 status(响应状态码) 一个三位字数的代码，告知客户端请求是否成功，需不需要其他操作 reason_phrase(响应关键字) 用于解释状态码 response_headers(响应头) key:value entity_body(响应主体) 可以是任何形式的数据,如image,html,或应用程序等 http连接过程 浏览器从URL中解析出服务器的域名和端口号 浏览器通过DNS服务解析出服务器的IP地址 浏览器与服务器建立一条TCP/IP连接 浏览器向服务器发送HTTP请求报文 服务器向浏览器返回HTTP响应报文 浏览器显示文档 http中间实体Gateways(网关) 连接其他应用程序的特殊web服务器，通常用于将HTTP流量转化为其他协议 代理 位于客户端与服务器之间的实体 缓存 HTTP的仓库，使常用页面的副本可以保存在离客户端更近的地方 隧道 对HTTP报文进行盲转发的特殊代理]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>http | web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python连接数据库]]></title>
    <url>%2F2018%2F09%2F21%2FPython%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[Python连接关系型数据库连接SQLite SQLite是一种轻量级的保存在普通文件中(无服务器，无配置的事务型)开源数据库，它不依赖于机器和操作系统，方便移植。SQLite是用Python标准库实现的，因此Pythony引擎是内置的 连接SQLite数据库1234import sqlite3conn=sqlite3.connect('test.db') #连接数据库test.db，若不存在则创建，可用绝对路径在其他目录中创建数据库#conn=sqlite3.connect(':memory:') 在内存中创建数据库，用于测试，程序结束数据丢失curs=conn.cursor() #通过cursor对象来处理sql事务 -连接MySQLPython通用连接数据库模块sqlalchemyPython连接非关系型数据库NoSQL连接dbm数据库连接memcached数据库连接redis数据库]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
